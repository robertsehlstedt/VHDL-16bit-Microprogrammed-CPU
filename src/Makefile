# Makefile for hardware implementation on Xilinx FPGAs and ASICs
# Author: Andreas Ehliar <ehliar@isy.liu.se>
# 
# T is the testbench file for this project
# S is the synthesizable sources for this project
# U is the UCF file
# PART is the part

# Important makefile targets:
# make lab.sim		GUI simulation
# make lab.simc		batch simulation
# make lab.synth	Synthesize
# make lab.route	Route the design
# make lab.bitgen	Generate bit file
# make lab.timing	Generate timing report
# make lab.clean	Use whenever you change settings in the Makefile!
# make lab.prog		Downloads the bitfile to the FPGA. NOTE: Does not
#                       rebuild bitfile if source files have changed!
# make clean            Removes all generated files for all projects. Also
#                       backup files (*~) are removed.
# 
# VIKTIG NOTERING: 	Om du Ã¤ndrar vilka filer som finns med i projektet sÃ¥ mÃ¥ste du kÃ¶ra
#                  	make lab.clean
#
# Syntesrapporten ligger i lab-synthdir/xst/synth/design.syr
# Maprapporten (bra att kolla i fÃ¶r arearapportens skull) ligger i lab-synthdir/layoutdefault/design_map.mrp
# Timingrapporten (skapas av make lab.timing) ligger i lab-synthdir/layoutdefault/design.trw

# (Or proj2.simc, proj2.sim, etc, depending on the name of the
# project)

XILINX_INIT = source /sw/xilinx/ise_12.4i/ISE_DS/settings64.sh;
PART=xc6slx16-3-csg324

# CPU
cpu.%: S = cpu.vhd alu.vhd k1.vhd k2.vhd umem.vhd program_mem.vhd
cpu.%: T = cpu_tb.vhd alu_tb.vhd k1_tb.vhd k2_tb.vhd umem_tb.vhd program_mem_tb.vhd

# ALU
alu.%: S = alu.vhd
alu.%: T = alu_tb.vhd

# K1
k1.%: S = k1.vhd
k1.%: T = k1_tb.vhd

# K2
k2.%: S = k2.vhd
k2.%: T = k2_tb.vhd

# UMEM
umem.%: S = umem.vhd
umem.%: T = umem_tb.vhd

# PROGRAM MEM
program.%: S = program_mem.vhd
program.%: T = program_mem_tb.vhd

# Det hÃ¤r Ã¤r ett exempel pÃ¥ hur man kan skriva en testbÃ¤nk som Ã¤r
# relevant, Ã¤ven om man kÃ¶r en simulering i batchlÃ¤ge (make batchlab.simc)
#batchlab.%: S=alu.vhd
#batchlab.%: T=batchlab_tb.vhd tb_print7seg.vhd
#batchlab.%: U=lab.ucf


# Misc functions that are good to have
include build/util.mk
# Setup simulation environment
include build/vsim.mk
# Setup synthesis environment
include build/xst.mk
# Setup backend flow environment
include build/xilinx-par.mk
# Setup tools for programming the FPGA
include build/digilentprog.mk

# Alternative synthesis methods
# The following is for ASIC synthesis
#include design_compiler.mk
# The following is for synthesis to a Xilinx target using Precision.
#include precision-xilinx.mk